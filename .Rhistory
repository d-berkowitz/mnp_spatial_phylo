<<<<<<< HEAD
install.packages("tidyverse")
library()
install.packages(c("nycflights13", "gapminder", "Lahman"))
library(tidyverse)
1 + 2
install.packages(c("nycflights13", "gapminder", "Lahman"))
x <- 1
source('~/.active-rstudio-document')
read.csv()
view(iris)
View(iris)
View(iris)
.rs.markdownToHTML()
rmarkdown::render("1-example.Rmd")
{r cars}
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
```{r setup, include=FALSE}
{r cars}
knitr::kable(
mtcars[1:5, ],
caption = "A knitr kable."
)
knitr::opts_chunk$set()
---
title: "Diamond sizes"
date: 2016-08-25
output: html_document
---
```{r setup, include = FALSE}
library(ggplot2)
library(dplyr)
smaller <- diamonds %>%
filter(carat <= 2.5)
```
We have data about `r nrow(diamonds)` diamonds. Only
`r nrow(diamonds) - nrow(smaller)` are larger than
2.5 carats. The distribution of the remainder is shown
below:
```{r, echo = FALSE}
smaller %>%
ggplot(aes(carat)) +
geom_freqpoly(binwidth = 0.01)
```
library(ggplot2)
library(dplyr)
smaller <- diamonds %>%
filter(carat <= 2.5)
smaller %>%
ggplot(aes(carat)) +
geom_freqpoly(binwidth = 0.01)
smaller %>%
ggplot(aes(carat)) +
geom_freqpoly(binwidth = 0.05)
smaller %>%
ggplot(aes(carat)) +
geom_freqpoly(binwidth = 0.75)
smaller %>%
ggplot(aes(carat)) +
geom_freqpoly(binwidth = 0.1)
smaller %>%
ggplot(aes(carat)) +
geom_freqpoly(binwidth = 0.05)
library(ggplot2)
library(dplyr)
smaller <- diamonds %>%
filter(carat <= 5)
library(ggplot2)
library(dplyr)
smaller <- diamonds %>%
filter(carat <= 5)
library(ggplot2)
library(dplyr)
smaller <- diamonds %>%
filter(carat <= 5)
smaller %>%
ggplot(aes(carat)) +
geom_freqpoly(binwidth = 0.05)
library(ggplot2)
library(dplyr)
smaller <- diamonds %>%
filter(carat <= 2)
smaller %>%
ggplot(aes(carat)) +
geom_freqpoly(binwidth = 0.05)
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
plot(pressure)
plot(pressure)
plot(pressure)
plot(pressure)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
*italic*
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidyverse")
library(tidyverse)
ggplot(data = mpg)
install.packages("tidyverse")
library(tidyverse)
ggplot(data = mpg)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
ggplot(data = mpg)
install.packages("tidyverse")
library(tidyverse)
ggplot(data = mpg)
mpg
library(tidyverse)
ggplot(data = mpg)
mpg
library(tidyverse)
ggplot(data = mpg)
mpg
?mpg
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = hwy, y = cyl))
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
library(tidyverse)
ggplot(data = mpg)%>%
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue"))
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue") +
facet_wrap(~ nrow = 2)
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue") +
facet_wrap(~ class, nrow = 2)
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue") +
facet_grid(~ class, nrow = 2)
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue") +
facet_grid(drv ~ cyl)
library(sp, rgdal, rgeos, ggplot2, ggmap, leaflet, RColorBrewer, classInt, and tmap)
packages <- c("sp", "rgdal", "rgeos", "ggplot2", "ggmap", "leaflet",
"RColorBrewer", "classInt", "tmap")
library(packages)
my_packages <- c("sp", "rgdal", "rgeos", "ggplot2", "ggmap", "leaflet",
"RColorBrewer", "classInt", "tmap")
packages(my_packages)
install.packages(easypackages
)
install.packages("easypackages")
my_packages <- c("sp", "rgdal", "rgeos", "ggplot2", "ggmap", "leaflet",
"RColorBrewer", "classInt", "tmap")
packages(my_packages)
library("easypackages")
my_packages <- c("sp", "rgdal", "rgeos", "ggplot2", "ggmap", "leaflet",
"RColorBrewer", "classInt", "tmap")
packages(my_packages)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
my_packages <- c("sp", "rgdal", "rgeos", "ggplot2", "ggmap", "leaflet",
"RColorBrewer", "classInt", "tmap")
packages(my_packages)
library("easypackages")
my_packages <- c("sp", "rgdal", "rgeos", "ggplot2", "ggmap", "leaflet",
"RColorBrewer", "classInt", "tmap")
packages(my_packages)
install.packages(c("assertthat", "backports", "BH", "boot", "broom", "cartogram", "class", "classInt", "clipr", "cluster", "codetools", "colorspace", "covr", "curl", "data.table", "DBI", "dbplyr", "digest", "dplR", "dtplyr", "e1071", "evaluate", "fansi", "fields", "forcats", "foreign", "gdtools", "geojson", "geojsonio", "geojsonlint", "ggplot2", "glue", "gtable", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "jpeg", "jsonvalidate", "KernSmooth", "knitr", "later", "lattice", "lazyeval", "leaflet", "lwgeom", "magick", "maptools", "mapview", "markdown", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "modelr", "ndjson", "nlme", "openssl", "osmdata", "pdftools", "pkgconfig", "plotly", "plyr", "prettyunits", "progress", "promises", "protolite", "ps", "R.oo", "R.utils", "R6", "raster", "RCurl", "readr", "readxl", "rentrez", "reprex", "rgdal", "rgeos", "RgoogleMaps", "RJSONIO", "rmapshaper", "rmarkdown", "rotl", "rpart", "rsconnect", "rstudioapi", "rvest", "satellite", "scales", "selectr", "sf", "shiny", "sp", "spam", "spData", "stars", "stringi", "stringr", "survival", "svglite", "sys", "tidyr", "tidyselect", "tidyverse", "tinytex", "tmap", "tmaptools", "units", "V8", "webshot", "whisker", "xfun", "XML", "xml2", "xtable"))
install.packages(c("assertthat", "backports", "BH", "boot", "broom", "cartogram", "class", "classInt", "clipr", "cluster", "codetools", "colorspace", "covr", "curl", "data.table", "DBI", "dbplyr", "digest", "dplR", "dtplyr", "e1071", "evaluate", "fansi", "fields", "forcats", "foreign", "gdtools", "geojson", "geojsonio", "geojsonlint", "ggplot2", "glue", "gtable", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "jpeg", "jsonvalidate", "KernSmooth", "knitr", "later", "lattice", "lazyeval", "leaflet", "lwgeom", "magick", "maptools", "mapview", "markdown", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "modelr", "ndjson", "nlme", "openssl", "osmdata", "pdftools", "pkgconfig", "plotly", "plyr", "prettyunits", "progress", "promises", "protolite", "ps", "R.oo", "R.utils", "R6", "raster", "RCurl", "readr", "readxl", "rentrez", "reprex", "rgdal", "rgeos", "RgoogleMaps", "RJSONIO", "rmapshaper", "rmarkdown", "rotl", "rpart", "rsconnect", "rstudioapi", "rvest", "satellite", "scales", "selectr", "sf", "shiny", "sp", "spam", "spData", "stars", "stringi", "stringr", "survival", "svglite", "sys", "tidyr", "tidyselect", "tidyverse", "tinytex", "tmap", "tmaptools", "units", "V8", "webshot", "whisker", "xfun", "XML", "xml2", "xtable"))
install.packages(c("assertthat", "backports", "BH", "boot", "broom", "cartogram", "class", "classInt", "clipr", "cluster", "codetools", "colorspace", "covr", "curl", "data.table", "DBI", "dbplyr", "digest", "dplR", "dtplyr", "e1071", "evaluate", "fansi", "fields", "forcats", "foreign", "gdtools", "geojson", "geojsonio", "geojsonlint", "ggplot2", "glue", "gtable", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "jpeg", "jsonvalidate", "KernSmooth", "knitr", "later", "lattice", "lazyeval", "leaflet", "lwgeom", "magick", "maptools", "mapview", "markdown", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "modelr", "ndjson", "nlme", "openssl", "osmdata", "pdftools", "pkgconfig", "plotly", "plyr", "prettyunits", "progress", "promises", "protolite", "ps", "R.oo", "R.utils", "R6", "raster", "RCurl", "readr", "readxl", "rentrez", "reprex", "rgdal", "rgeos", "RgoogleMaps", "RJSONIO", "rmapshaper", "rmarkdown", "rotl", "rpart", "rsconnect", "rstudioapi", "rvest", "satellite", "scales", "selectr", "sf", "shiny", "sp", "spam", "spData", "stars", "stringi", "stringr", "survival", "svglite", "sys", "tidyr", "tidyselect", "tidyverse", "tinytex", "tmap", "tmaptools", "units", "V8", "webshot", "whisker", "xfun", "XML", "xml2", "xtable"))
install.packages(c("assertthat", "backports", "BH", "boot", "broom", "cartogram", "class", "classInt", "clipr", "cluster", "codetools", "colorspace", "covr", "curl", "data.table", "DBI", "dbplyr", "digest", "dplR", "dtplyr", "e1071", "evaluate", "fansi", "fields", "forcats", "foreign", "gdtools", "geojson", "geojsonio", "geojsonlint", "ggplot2", "glue", "gtable", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "jpeg", "jsonvalidate", "KernSmooth", "knitr", "later", "lattice", "lazyeval", "leaflet", "lwgeom", "magick", "maptools", "mapview", "markdown", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "modelr", "ndjson", "nlme", "openssl", "osmdata", "pdftools", "pkgconfig", "plotly", "plyr", "prettyunits", "progress", "promises", "protolite", "ps", "R.oo", "R.utils", "R6", "raster", "RCurl", "readr", "readxl", "rentrez", "reprex", "rgdal", "rgeos", "RgoogleMaps", "RJSONIO", "rmapshaper", "rmarkdown", "rotl", "rpart", "rsconnect", "rstudioapi", "rvest", "satellite", "scales", "selectr", "sf", "shiny", "sp", "spam", "spData", "stars", "stringi", "stringr", "survival", "svglite", "sys", "tidyr", "tidyselect", "tidyverse", "tinytex", "tmap", "tmaptools", "units", "V8", "webshot", "whisker", "xfun", "XML", "xml2", "xtable"))
install.packages(c("assertthat", "backports", "BH", "boot", "broom", "cartogram", "class", "classInt", "clipr", "cluster", "codetools", "colorspace", "covr", "curl", "data.table", "DBI", "dbplyr", "digest", "dplR", "dtplyr", "e1071", "evaluate", "fansi", "fields", "forcats", "foreign", "gdtools", "geojson", "geojsonio", "geojsonlint", "ggplot2", "glue", "gtable", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "jpeg", "jsonvalidate", "KernSmooth", "knitr", "later", "lattice", "lazyeval", "leaflet", "lwgeom", "magick", "maptools", "mapview", "markdown", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "modelr", "ndjson", "nlme", "openssl", "osmdata", "pdftools", "pkgconfig", "plotly", "plyr", "prettyunits", "progress", "promises", "protolite", "ps", "R.oo", "R.utils", "R6", "raster", "RCurl", "readr", "readxl", "rentrez", "reprex", "rgdal", "rgeos", "RgoogleMaps", "RJSONIO", "rmapshaper", "rmarkdown", "rotl", "rpart", "rsconnect", "rstudioapi", "rvest", "satellite", "scales", "selectr", "sf", "shiny", "sp", "spam", "spData", "stars", "stringi", "stringr", "survival", "svglite", "sys", "tidyr", "tidyselect", "tidyverse", "tinytex", "tmap", "tmaptools", "units", "V8", "webshot", "whisker", "xfun", "XML", "xml2", "xtable"))
install.packages(c("assertthat", "backports", "BH", "boot", "broom", "cartogram", "class", "classInt", "clipr", "cluster", "codetools", "colorspace", "covr", "curl", "data.table", "DBI", "dbplyr", "digest", "dplR", "dtplyr", "e1071", "evaluate", "fansi", "fields", "forcats", "foreign", "gdtools", "geojson", "geojsonio", "geojsonlint", "ggplot2", "glue", "gtable", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "jpeg", "jsonvalidate", "KernSmooth", "knitr", "later", "lattice", "lazyeval", "leaflet", "lwgeom", "magick", "maptools", "mapview", "markdown", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "modelr", "ndjson", "nlme", "openssl", "osmdata", "pdftools", "pkgconfig", "plotly", "plyr", "prettyunits", "progress", "promises", "protolite", "ps", "R.oo", "R.utils", "R6", "raster", "RCurl", "readr", "readxl", "rentrez", "reprex", "rgdal", "rgeos", "RgoogleMaps", "RJSONIO", "rmapshaper", "rmarkdown", "rotl", "rpart", "rsconnect", "rstudioapi", "rvest", "satellite", "scales", "selectr", "sf", "shiny", "sp", "spam", "spData", "stars", "stringi", "stringr", "survival", "svglite", "sys", "tidyr", "tidyselect", "tidyverse", "tinytex", "tmap", "tmaptools", "units", "V8", "webshot", "whisker", "xfun", "XML", "xml2", "xtable"))
install.packages(c("dbplyr", "dplR", "ggplot2", "leaflet", "mapview", "markdown", "plyr", "raster", "rgdal", "rmarkdown", "sf", "shiny", "sp", "spData", "tidyr", "tidyselect", "tidyverse", "tmap", "tmaptools"))
#packages(my_packages)
old.packages(
)
install.packages?
#packages(my_packages)
?install.packages
#packages(my_packages)
?install.packages()
#packages(my_packages)
?update.packages()
#packages(my_packages)
update.packages()
update.packages(ask = FALSE)
library("easypackages")
my_packages <- c("sp", "rgdal", "rgeos", "ggplot2", "ggmap", "leaflet",
"RColorBrewer", "classInt", "tmap")
packages(my_packages)
?packages
library("easypackages")
my_packages <- c("sp", "rgdal", "rgeos", "ggplot2", "ggmap", "leaflet",
"RColorBrewer", "classInt", "tmap")
packages(my_packages)
old.packages()
update.packages(ask = FALSE)
#clean_species_names
#load libraries
library(dplyr)
library(taxize)
library(magrittr)
library(tidyverse)
setwd("/Users/deanberkowitz/Documents/mishler_lab/thesis/mnp_spatial_phylo/") # change to your project HOME directory directory
# load all csv files and merge into one large data table
path <- "data/raw/spatial" # path to your raw data, if different organization than this
files <- list.files(path = path, full.names = T)
#check files
test_df <- read_csv(files[1])
head(test_df$Genus_Species)
head(test_df)
#Subset df to include only useful columns
test_df_subset <- test_df %>% select(Latitude, Longitude, Cover_Class, Genus_Species, Family)
head(test_df_subset)
#specify reference databases to use
sources <- c("EOL", "The International Plant Names Index", "ITIS")
#show specified sources
subset(gnr_datasources(), title %in% sources)
#submit request to global names resolver
gnr_df.long <- test_df_subset$Genus_Species %>%
gnr_resolve(data_source_ids = c(3, 167),
with_canonical_ranks=T)
#subset results to only include submitted names, matched names, scores
gnr_df.short <- result.long %>%
select(submitted_name, matched_name2, score) %>%
distinct()
gnr_df.short
#submit request to global names resolver
gnr_df.long <- test_df_subset$Genus_Species %>%
gnr_resolve(data_source_ids = c(3, 167),
with_canonical_ranks=T)
#subset results to only include submitted names, matched names, scores
gnr_df.short <- gnr_df.long %>%
select(submitted_name, matched_name2, score) %>%
distinct()
gnr_df.short
View(gnr_df.short)
getwd()
#import commented table back into R
correct.df <- read_csv('data/raw/sp_names_txt/gnr_df_comments.short.csv')
correct.df
correct.df.isna()
correct.df.is.na()
correct.df %>% is.na()
correct.df %>% tidyr::replace_na()
correct.df %>% tidyr::replace_na(list(alternative = FALSE, duplicate = FALSE, implement = FALSE))
correct.df %<>% filter(!dupl ==T)
correct.df %<>% filter(!duplicate ==T)
correct.df
#import commented table back into R
correct.df <- read_csv('data/raw/sp_names_txt/gnr_df_comments.short.csv')
#convert NAs to FALSE
correct.df <- correct.df %>% tidyr::replace_na(list(alternative = FALSE, duplicate = FALSE, implement = FALSE))
correct.df %>% filter(!duplicate ==T)
View(correct.df)
#filter out duplicates
correct.df <- correct.df %>% filter(!duplicate ==T)
correct.df
View(correct.df)
=======
install.packages("ggplot2")
# load data
# mean <- read.csv("pigments-restructured.csv")
# stddevdata <- read.csv("standard-dev-pigments.csv")
mean.normtotalpigment <- read.csv("pigments/normtotalpigment.csv")
myWorkingDirectory <- "/Users/jennaekwealor/Documents/dean_project/mnp_spatial_phylo"
setwd(myWorkingDirectory)
library(tidyverse)
library(dplyr)
library(readr)
setwd("/Users/jennaekwealor/Documents/dean_project/mnp_spatial_phylo") # change to your project HOME directory directory
# load all csv files and merge into one large data table
path <- "/data/raw/spatial"
?bind_rows()
setwd("/Users/jennaekwealor/Documents/dean_project/mnp_spatial_phylo") # change to your project HOME directory directory
# load all csv files and merge into one large data table
path <- "/data/raw/spatial" # path to your raw data, if different organization than this
files <- list.files(path, pattern = "*.csv", full.names = T)
files
# load all csv files and merge into one large data table
path <- "/data/raw/spatial" # path to your raw data, if different organization than this
files <- list.files(path, pattern = "*.csv", full.names = T)
files <- list.files(path = path, pattern = "*.csv", full.names = T)
files <- list.files(path = path, pattern = "*.csv", full.names = T)
?list.files()
# load all csv files and merge into one large data table
path <- "/data/raw/spatial" # path to your raw data, if different organization than this
path
files <- list.files(path = path, pattern = "*.csv", full.names = T)
ls(data/raw/spatial)
ls("data/raw/spatial")
files <- list.files(path = path, full.names = T)
list.files()
list.files(path = "data")
# load all csv files and merge into one large data table
path <- "data/raw/spatial" # path to your raw data, if different organization than this
files <- list.files(path = path, full.names = T)
files
tbl <- sapply(files, read_csv, simplify=FALSE) %>%
bind_rows()
tbl <- sapply(files, read_csv, simplify=FALSE)
>>>>>>> 40e758b4732cfbd1d262870c47e3b46098503f5b
