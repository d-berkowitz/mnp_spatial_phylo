install.packages("ggplot2")
# load data
# mean <- read.csv("pigments-restructured.csv")
# stddevdata <- read.csv("standard-dev-pigments.csv")
mean.normtotalpigment <- read.csv("pigments/normtotalpigment.csv")
library(tidyverse)
library(dplyr)
library(readr)
setwd("/Users/jennaekwealor/Documents/dean_project/mnp_spatial_phylo") # change to your project HOME directory directory
# load all csv files and merge into one large data table
path <- "data/raw/spatial" # path to your raw data, if different organization than this
files <- list.files(path = path, full.names = T)
files
tbl <- sapply(files, read_csv, simplify=FALSE) %>%
bind_rows(.id = "id")
tbl <- sapply(files, read_csv, simplify=FALSE)
View(tbl)
View(tbl)
tbl <- sapply(files, read_csv, simplify=FALSE) %>%
bind_rows(.id = "id")
files <- list.files(path = path, full.names = T)
tbl <- sapply(files, read_csv, simplify=FALSE)
tbl <- sapply(files, read_csv, simplify=FALSE) %>%
bind_rows(.id = "id")
tbl <- sapply(files, read_csv, simplify=FALSE)
# load all csv files and merge into one large data table
path <- "data/raw/spatial" # path to your raw data, if different organization than this
files <- list.files(path = path, full.names = T)
tbl <- sapply(files, read_csv, simplify=FALSE) %>%
bind_rows(.id = "id")
tbl <- sapply(files, read_csv, simplify=FALSE)
tbl <- sapply(files, read_csvc('Latitude', 'Longitude', 'Genus_Species', 'Cover Class'), simplify=FALSE)
tbl <- sapply(files, read_csv, c('Latitude', 'Longitude', 'Genus_Species', 'Cover Class'), simplify=FALSE)
tbl <- sapply(files, read_csv, c('Latitude'), simplify=FALSE)
tbl <- sapply(files, read_csv, c('Latitude', 'Longitude', 'Genus_Species', 'Cover Class'), simplify=FALSE)
read.csv(file = files, sep = ",")[ ,c('Latitude', 'Longitude', 'Genus_Species', 'Cover Class')]
tbl <- sapply(files, read_csv[ ,c('Latitude', 'Longitude', 'Genus_Species', 'Cover Class')], , simplify=FALSE)
tbl <- sapply(files, read_csv[ ,c('Latitude', 'Longitude', 'Genus_Species', 'Cover Class')], , simplify=FALSE)
tbl <- sapply(files[ ,c('Latitude', 'Longitude', 'Genus_Species', 'Cover Class')], read_csv, simplify=FALSE)
tbl <- sapply(files, read_csv, simplify=FALSE)
bound <- bind_rows(tbl)
tbl <- sapply(files, read_csv, simplify=FALSE)
bound <- bind_rows(tbl)
tbl <- rbind.fill(files)
tbl <- bind.rows(files)
library(dplyr)
tbl <- bind.rows(files)
tbl <- bind_rows(files)
tbl <- bind.rows(files)
tbl <- sapply(files, read_csv, simplify=FALSE)
bound <- bind_rows(files)
bind_rows(lapply(tbl, function(dtt){mutate_all(dtt, as.character)}))
bound <- bind_rows(lapply(tbl, function(dtt){mutate_all(dtt, as.character)}))
View(bound)
View(bound)
# remove any fully duplicated rows
data <- distinct(bound)
# pull out columns we're interested in
spatial_data <- select(data, Easting, Northing, Latitude, Longitude, Genus_Species, Family, Cover Class)
# pull out columns we're interested in
spatial_data <- select(data, Easting, Northing, Latitude, Longitude, Genus_Species, Family, Cover.Class)
View(data)
View(data)
colnames(data)
tbl %>%
rename("Cover_Class" = "Cover Class") %>%
colnames()
for (i in seq_along(tbl)){
rename("Cover_Class" = "Cover Class") %>%
colnames()
}
for (i in seq_along(tbl)){
rename("Cover_Class" = "Cover Class") %>%
colnames(tbl[[i]])
for (i in seq_along(tbl)){
rename("Cover_Class" = "Cover Class") %>%
colnames(tbl[[i]])
}
)
for (i in seq_along(tbl)){
rename("Cover_Class" = "Cover Class") %>%
colnames(tbl[[i]]))
}
for (i in seq_along(tbl)){
rename("Cover_Class" = "Cover Class") %>%
colnames(tbl[[i]])
}
?rename()
for (i in seq_along(tbl)){
rename(tbl[[i]],"Cover_Class" = "Cover Class") %>%
colnames()
}
View(tbl)
View(tbl[["data/raw/spatial/C_MJV3-15-BIO-VT-2,1_QCSM.csv"]])
View(tbl[["data/raw/spatial/C_MJV3-15-BIO-VT-3,2_QCSM.csv"]])
View(tbl[["data/raw/spatial/C_MJV3-15-BIO-VT-7,3_QCSM.csv"]])
View(tbl[["data/raw/spatial/PartialMJV19-19-BIO-VT-6,4.csv"]])
View(tbl[["data/raw/spatial/PartialMJV19-19-BIO-VT-1,7.csv"]])
View(tbl[["data/raw/spatial/PartialMJV19-19-BIO-VT-1,6.csv"]])
View(tbl[["data/raw/spatial/PartialMJV11-17-BIO-VT-9,2.csv"]])
View(tbl[["data/raw/spatial/PartialMJV11-17-BIO_VT-9,1.csv"]])
View(tbl[["data/raw/spatial/MJV12-17-BIO-VT-6,4.csv"]])
View(tbl[["data/raw/spatial/MJV1_3_4_8-BIO-VT-ALL_SEPT132016___FINAL DATA FOR GSA_v2.csv"]])
View(tbl[["data/raw/spatial/C_MJV4-15-BIO-VT-6,5_QCSM.csv"]])
for (i in seq_along(tbl)){
rename(tbl[[i]],"Cover_Class" = Cover Class) %>%
colnames()
}
rename(tbl[[i]],"Cover_Class" = "Cover.Class") %>%
colnames()
rename(tbl[[i]],"Cover_Class" = "Cover Class") %>%
colnames()
colnames(tbl)
for (i in seq_along(tbl)){
colnames(tbl[[i]])[grep(" ", colnames(tbl[[i]]))] <-"_"
}
tbl[["data/raw/spatial/C_MJV3-15-BIO-VT-2,1_QCSM.csv"]]
View(tbl[["data/raw/spatial/MJV12-17-BIO-VT-6,4.csv"]])
View(tbl[["data/raw/spatial/MJV12-17-BIO-VT-6,4.csv"]])
View(tbl[["data/raw/spatial/MJV1_3_4_8-BIO-VT-ALL_SEPT132016___FINAL DATA FOR GSA_v2.csv"]])
for (i in seq_along(tbl)){
colnames(tbl[[i]])[grep("Cover Class", colnames(tbl[[i]]))] <-"Cover_Class"
}
tbl <- sapply(files, read_csv, simplify=FALSE)
tbl %>%
rename("Cover_Class" = "Cover Class") %>%
colnames()
for (i in seq_along(tbl)){
colnames(tbl[[i]])[grep("Cover Class", colnames(tbl[[i]]))] <-"Cover_Class"
}
files <- list.files(path = path, full.names = T)
tbl <- sapply(files, read_csv, simplify=FALSE)
View(tbl[["data/raw/spatial/C_MJV8-16-BIO-VT-6-2.csv"]])
for (i in seq_along(tbl)){
colnames(tbl[[i]])[grep("Cover Class", colnames(tbl[[i]]))] <-"Cover_Class"
}
colnames(tbl[[i]]))
colnames(tbl[[i]])
bound <- bind_rows(lapply(tbl, function(dtt){mutate_all(dtt, as.character)}))
# remove any fully duplicated rows
data <- distinct(bound)
# view column names to find which are duplicates
colnames(data)
View(tbl[["data/raw/spatial/C_MJV8-16-BIO-VT-6-2.csv"]])
View(tbl[["data/raw/spatial/MJV12-17-BIO-VT-6,4.csv"]])
# bind all data tables by column names
bound <- bind_rows(lapply(tbl, function(dtt){mutate_all(dtt, as.character)}))
# remove any fully duplicated rows
data <- distinct(bound)
# view column names to find which are duplicates
colnames(data)
spatial_data <- select(data, Easting, Northing, Latitude, Longitude, Genus_Species, genus, species, Family, Cover_Class)
View(spatial_data)
View(spatial_data)
spatial_data[!is.na(spatial_data$Family),]
# remove any rows that have NA in the family column, as as short cut to removing unknown genus and species
spatial_data <- spatial_data[!is.na(spatial_data$Family),]
# view column names to find if any are duplicates that should be renamed before bind_rows() as above
colnames(data)
spatial_data <- select(data, Easting, Northing, Latitude, Longitude, Genus_Species, genus, species, Family, Cover_Class)
View(bound)
# bind all data tables by column names
bound <- bind_rows(lapply(tbl, function(dtt){mutate_all(dtt, as.character)}))
# remove any fully duplicated rows
data <- distinct(bound)
?distinct()
files <- list.files(path = path, full.names = T)
files <- list.files(path = path, full.names = T)
# make a list of the files that are loaded
tbl <- sapply(files, read_csv, simplify=FALSE)
# replace column name "Cover Class" with "Cover_Class" so they properly join
for (i in seq_along(tbl)){
colnames(tbl[[i]])[grep("Cover Class", colnames(tbl[[i]]))] <-"Cover_Class"
}
# bind all data tables by column names
bound <- bind_rows(lapply(tbl, function(dtt){mutate_all(dtt, as.character)}))
# remove any fully duplicated rows
data <- distinct(bound)
# view column names to find if any are duplicates that should be renamed before bind_rows() as above
colnames(data)
# remove any fully duplicated rows
data <- distinct(bound)
# view column names to find if any are duplicates that should be renamed before bind_rows() as above
colnames(data)
# replace column name "Cover Class" with "Cover_Class" so they properly join
for (i in seq_along(tbl)){
colnames(tbl[[i]])[grep("Cover Class", colnames(tbl[[i]]))] <-"Cover_Class"
colnames(tbl[[i]])[grep("LAT", colnames(tbl[[i]]))] <-"Latitude"
colnames(tbl[[i]])[grep("LONG", colnames(tbl[[i]]))] <-"Longitude"
}
# bind all data tables by column names
bound <- bind_rows(lapply(tbl, function(dtt){mutate_all(dtt, as.character)}))
# remove any fully duplicated rows
data <- distinct(bound)
# view column names to find if any are duplicates that should be renamed before bind_rows() as above
colnames(data)
# replace column name "Cover Class" with "Cover_Class" so they properly join
for (i in seq_along(tbl)){
colnames(tbl[[i]])[grep("Cover Class", colnames(tbl[[i]]))] <-"Cover_Class"
colnames(tbl[[i]])[grep("LAT", colnames(tbl[[i]]))] <-"Latitude"
colnames(tbl[[i]])[grep("LONG", colnames(tbl[[i]]))] <-"Longitude"
colnames(tbl[[i]])[grep("Genius_Species", colnames(tbl[[i]]))] <-"Genus_Species"
}
# bind all data tables by column names
bound <- bind_rows(lapply(tbl, function(dtt){mutate_all(dtt, as.character)}))
# remove any fully duplicated rows
data <- distinct(bound)
# view column names to find if any are duplicates that should be renamed before bind_rows() as above
colnames(data)
spatial_data <- select(data, Easting, Northing, Latitude, Longitude, Genus_Species, genus, species, Family, Cover_Class)
spatial_data <- select(data, Easting, Northing, Latitude, Longitude, Genus_Species, genus, species, Family, Cover_Class)
length(spatial_data$Genus_Species)
# remove any fully duplicated rows
data <- distinct(bound)
# view column names to find if any are duplicates that should be renamed before bind_rows() as above
colnames(data)
spatial_data <- select(data, Easting, Northing, Latitude, Longitude, Genus_Species, genus, species, Family, Cover_Class)
# remove any fully duplicated rows
data <- distinct(bound)
# view column names to find if any are duplicates that should be renamed before bind_rows() as above
colnames(data)
spatial_data <- select(data, Easting, Northing, Latitude, Longitude, Genus_Species, genus, species, Family, Cover_Class)
length(spatial_data$Genus_Species)
length(spatial_data$Family)
is.na(spatial_data$Family)
